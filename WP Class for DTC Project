// This works great, it follows the template but it has a few kinks that I will want to get worked on. 
using System;
using System.Collections.Generic;
using System.IO;

namespace Create_DTC_Webpage_From_File
{
    class WP
    {
        string DTC_Write_Path = @"D:\Hobbies\PROGRAMMING\Programming\C#\Project DTC Codes\DTC WP\";

        string DTC_HTML_Template = @"D:\Hobbies\PROGRAMMING\Programming\C#\Project DTC Codes\HTML Barebones Files\Barebones HTML Layout v2.txt";
       
        string DTC_CSS_Style = @"D:\Hobbies\PROGRAMMING\Programming\C#\Project DTC Codes\CSS Files\CSS style v2.txt";
        string title;
        
        string fileName;
        public string[] theDate = new string[4];
        public List<string> dtc_codes = new List<string>();
        public List<string> dtc_Comments = new List<string>();

        StreamWriter sw;
        StreamReader sr;

        public WP(string file, string title)
        {
            // Read the DTC HTML Template 
            
            this.title = title;
            
            fileName = file;

            
            writeDate(file);
            
            readDTCFile(file);
            write_DTC_WebPage();

        }

       public void writeDate (string filePath)
        {
            string temp = "";
            StreamReader readDate = new StreamReader(filePath);
            
            temp = readDate.ReadLine();
            theDate = temp.Split(',');

            
        }

       public void write_DTC_WebPage()
        {
            sr = new StreamReader(DTC_HTML_Template);
            sw = new StreamWriter(DTC_Write_Path + Path.GetFileName(fileName) + ".html");
            while (!sr.EndOfStream)
            {

                string line = sr.ReadLine();
                
                switch (line)
                {
                    // Write the day
                    case "<p class=\"date\" id=\"day\">":
                        sw.WriteLine("<p class=\"date\" id=\"day\">");
                        sw.WriteLine(theDate[0]);
                        break;
                    // Write the CSS Style
                    case "<style>":
                        StreamReader css = new StreamReader(DTC_CSS_Style);
                        // Now write it to the file 
                        sw.WriteLine("<style>");
                        sw.WriteLine(css.ReadToEnd());
                        css.Close();
                        break;

                    // Write the time hour:minute:second
                    case "<p class=\"date\" id=\"time\">":
                        sw.WriteLine("<p class=\"date\" id=\"time\">");
                        sw.WriteLine(theDate[4]);

                        break;
                    // Write the date in format day-Month-year
                    case "<p class=\"date\" id=\"date1\">":
                        sw.WriteLine("<p class=\"date\" id=\"date1\">");
                        sw.WriteLine(theDate[1] + "-" + theDate[2] + "-" + theDate[3]);
                        break;

                    // Lets write the DTC codes and format them in the <p> </p> element.
                    case "<h2 class=\"dtc-title\"> DTC Codes:</h2>":

                        sw.WriteLine("<h2 class=\"dtc-title\"> DTC Codes:</h2>");
                        foreach (string dtc in dtc_codes)
                        {
                            sw.WriteLine("<p>" + dtc + "</p>");
                        }
                        break;

                    case "<h2 class=\"comment-title\">Comments:</h2>":
                        sw.WriteLine("<h2 class=\"comment-title\">Comments:</h2>");
                       foreach (string s in dtc_Comments)
                        {
                            sw.WriteLine("<p>" + s + "</p>");
                        }

                        break;
                    case "<title>":
                        sw.WriteLine("<title>");
                        sw.WriteLine(Path.GetFileName(fileName));
                        break;
                    default:
                        
                        sw.WriteLine(line);
                        break;
                }


            }
            sw.Close();
            sr.Close();

        }

       public void readDTCFile(string filePath)
        {
            
            int comments_Index = 0;
           
            sr = new StreamReader(filePath);
            // Read the contents of dtc
            
            // Read all lines and split with "\t" out 
           string[] DTC_file = sr.ReadToEnd().Split('\n');
           
            // Because the program VCDS is consistant with writing the header
            // We know that the VCID is in position 9. So we start to read DTC codes at 10
            for (int i=10; i<DTC_file.Length; i++)
            {
                // We add our dtc codes to the global list called dtc_codes
                // But if we see a line or in this case an array position that starts with "//"
                // We break the code and adding to the DTC list because we know that comments are coming
                dtc_codes.Add(DTC_file[i]);

                if (DTC_file[i].StartsWith("//"))
                {
                    // Lets return i so we know when the commments start
                    comments_Index = i;
                    break;
                }
            }

            // Now we know the index that the comments start and obviously we know the end
            // of the file/ array that is DTC file 
            for ( int a = comments_Index; a < DTC_file.Length; a++)
            {
                dtc_Comments.Add(DTC_file[a]);
            }
           
            
        }


        string writeDTCCodes()
        {
            readDTCFile(fileName);
            string dtccodes = "";
            for (int a = 0; a < dtc_codes.Count - 1; a++)
            {
                dtccodes = "<p>" + dtc_codes[a] + "</p>" + Environment.NewLine;
            }
            return dtccodes;
        }
    }

    
}
